/* ==================================================
   GENERAL
================================================== */

$breakpoints: (
        'phone': 480px,
        'tablet': 768px,
        'desktop': 1024px,
        'huge': 2560px,
) !default;

///
/// Creates a list of static expressions or media types
///
/// @author Eduardo Boucas
///
/// @example scss - Creates a single media type (screen)
///  $media-expressions: ('screen': 'screen');
///
/// @example scss - Creates a static expression with logical disjunction (OR operator)
///  $media-expressions: (
///   'retina2x': (
///     '(-webkit-min-device-pixel-ratio: 2)',
///     '(min-resolution: 192dpi)'
///   )
/// );
///
$media-expressions: (
        'screen': 'screen',
        'print': 'print',
        'handheld': 'handheld',
        'retina2x': (
                '(-webkit-min-device-pixel-ratio: 2)',
                '(min-resolution: 192dpi)'
        ),
        'retina3x': (
                '(-webkit-min-device-pixel-ratio: 3)',
                '(min-resolution: 350dpi)'
        )
) !default;

///
/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals
///
/// @author Eduardo Boucas
///
/// @example scss - Interval for pixels is defined as `1` by default
///  @include media(">128px") {}
///
///  /* Generates: */
///  @media (min-width: 129px) {}
///
/// @example scss - Interval for ems is defined as `0.01` by default
///  @include media(">20em") {}
///
///  /* Generates: */
///  @media (min-width: 20.01em) {}
///
/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`
///  @include media(">2.0rem") {}
///
///  /* Generates: */
///  @media (min-width: 2.1rem) {}
///
$unit-intervals: (
        'px': 1,
        'em': 0.01,
        'rem': 0.1
) !default;
///
/// Generates a media query based on a list of conditions
///
/// @author Eduardo Boucas
///
/// @param {List}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media(">phone") { }
///
/// @example scss - With two set breakpoints
///  @include media(">phone", "<=tablet") { }
///
/// @example scss - With custom values
///  @include media(">=358px", "<850px") { }
///
/// @example scss - With set breakpoints with custom values
///  @include media(">desktop", "<=1350px") { }
///
/// @example scss - With a static expression
///  @include media("retina2x") { }
///
/// @example scss - Mixing everything
///  @include media(">=350px", "<tablet", "retina3x") { }
///
@mixin media($conditions...) {
    @for $i from 1 through length($conditions) {
        $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));
    }

    $branches: get-query-branches($conditions);
    $query: '';

    @each $branch in $branches {
        @if (str-length($query) != 0) {
            $query: $query + ', ';
        }

        $query: $query + $branch;
    }

    @media #{$query} {
        @content;
    }
}

///
/// Reads a list of media query expressions and separates logical disjunctions into different branches
///
/// @author Eduardo Boucas
///
/// @param {List}   $expressions  - list of expressions
///
/// @throws `$expression` is not a valid expression
///
/// @return {List | Null}
///
@function get-query-branches($expressions) {
    $result: '';
    $has-groups: false;

    // Getting initial snapshot and looking for groups
    @each $expression in $expressions {
        @if (str-length($result) != 0) {
            $result: $result + ' and ';
        }

        @if (type-of($expression) == 'string') {
            $result: $result + $expression;
        } @else if (type-of($expression) == 'list') {
            $result: $result + nth($expression, 1);
            $has-groups: true;
        } @else {
            @warn '#{$expression} is not a valid expression.';
        }
    }

    // If we have groups, we have to create all possible combinations
    @if $has-groups {
        @each $expression in $expressions {
            @if (type-of($expression) == 'list') {
                $first: nth($expression, 1);

                @each $member in $expression {
                    @if ($member != $first) {
                        @each $partial in $result {
                            $result: join($result, str-replace-first($first, $member, $partial));
                        }
                    }
                }
            }
        }
    }

    @return $result;
}

///
/// Parses a string to form a media query expression
///
/// @author Eduardo Boucas
///
/// @param {String}   $expression  - expression (in string)
///
/// @throws Expression with type `type-of($expression)` detected, string expected
/// @throws `$expression` is missing an operator
/// @throws Unknown unit: `$unit`
///
/// @return {String | Null}
///
@function parse-expression($expression) {
    $operator: '';
    $value: '';
    $element: '';
    $result: '';
    $is-width: true;

    @if (type-of($expression) != 'string') {
        @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';
    }

    // Separating the operator from the rest of the expression
    @if (str-slice($expression, 2, 2) == '=') {
        $operator: str-slice($expression, 1, 2);
        $value: str-slice($expression, 3);
    } @else {
        $operator: str-slice($expression, 1, 1);
        $value: str-slice($expression, 2);
    }

    // Checking what type of expression we're dealing with
    @if map-has-key($breakpoints, $value) {
        $result: map-get($breakpoints, $value);
    } @else if map-has-key($media-expressions, $expression) {
        $result: map-get($media-expressions, $expression);
        $is-width: false;
    } @else {
        $result: to-number($value);
    }

    @if ($is-width) {
        $unit: unit($result);
        $interval: 0;

        @if (map-has-key($unit-intervals, $unit)) {
            $interval: map-get($unit-intervals, $unit);
        } @else {
            @warn 'Unknown unit: #{$unit}';
        }

        @if ($operator == '>') {
            $element: '(min-width: #{$result + $interval})';
        } @else if ($operator == '<') {
            $element: '(max-width: #{$result - $interval})';
        } @else if ($operator == '>=') {
            $element: '(min-width: #{$result})';
        } @else if ($operator == '<=') {
            $element: '(max-width: #{$result})';
        } @else {
            @warn '#{$expression} is missing an operator.';
        }
    } @else {
        $element: $result;
    }

    @return $element;
}

///
/// Replaces the first occurence of the string with the replacement string
///
/// @author Eduardo Boucas
///
/// @param {String}   $search  - The value being searched for
/// @param {String}   $replace  - The replacement string
/// @param {String}   $subject  - The string being replaced on
///
/// @return {String | Null}
///
@function str-replace-first($search, $replace, $subject) {
    $search-start: str-index($subject, $search);

    @if $search-start == null {
        @return $subject;
    }

    $result: str-slice($subject, 0, $search-start - 1);
    $result: $result + $replace;
    $result: $result + str-slice($subject, $search-start + str-length($search));

    @return $result;
}

///
/// Casts a number to a string
///
/// @author Hugo Giraudel
///
/// @param {String}   $string  - Number to be parsed
///
/// @return {List | Null}
///
@function to-number($string) {
    // Matrices
    $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
    $numbers:  0   1   2   3   4   5   6   7   8   9;

    // Result
    $result: 0;
    $divider: 0;
    $minus: false;

    // Looping through all characters
    @for $i from 1 through str-length($string) {
        $character: str-slice($string, $i, $i);
        $index: index($strings, $character);


        @if $character == '-' {
            $minus: true;
        }

        @else if $character == '.' {
            $divider: 1;
        }

        @else {
            @if type-of($index) != 'number' {
                $result: if($minus, $result * -1, $result);
                @return _length($result, str-slice($string, $i));
            }

            $number: nth($numbers, $index);

            @if $divider == 0 {
                $result: $result * 10;
            }

            @else {
                // Move the decimal dot to the left
                $divider: $divider * 10;
                $number: $number / $divider;
            }

            $result: $result + $number;
        }
    }

    @return if($minus, $result * -1, $result);
}

@function _length($number, $unit) {
    $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
    $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
    $index: index($strings, $unit);

    @if type-of($index) != 'number' {
        @warn 'Unknown unit `#{$unit}`.';
        @return false;
    }

    @return $number * nth($units, $index);
}

html {
    height: 100%;
    overflow: auto;

    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    text-size-adjust: 100%;
}

body {
    color: var(--dark-gray);
    background: var(--light);

    font-family: "Source Sans Pro", Arial, Helvetica, sans-serif;
    font-size: 20px;
    font-weight: var(--default-font-weight);
    line-height: 32px;
    vertical-align: baseline;
}

::selection {
    background: var(--primary);
    color: var(--light);
}

::-moz-selection {
    background: var(--primary);
    color: var(--light);
}

a {
    color: var(--primary);
    text-decoration: none;
}

a:hover {
    color: var(--dark);
    transition: color 75ms linear;
    text-decoration: underline;
    text-decoration-thickness: from-font;
}

/* ==================================================
   Default Typography
================================================== */

strong {
    font-weight: 600;
}

em {
    font-style: italic;
}

h1,
h2,
h3 {
    font-size: 3em;
    line-height: 60px;
    margin: 0 0 20px 0;
    letter-spacing: -1px;
    font-weight: 300;
    text-transform: uppercase;
}

h2 {
    font-size: 38px;
    line-height: 38px;
}

h3 {
    font-size: 32px;
    line-height: 32px;
}

/* ==================================================
   Global Styles
================================================== */

.aria-tooltip {
    position: relative;

    &::after {
        content: attr(aria-label);
        position: absolute;
        width: max-content;

        transform: translateX(-50%) scale(0);
        transform-origin: center top;
        left: 50%;
        top: 100%;
        margin: 0 auto;
        padding: 0 0.4em;
        border-radius: 4px;

        font-size: 16px;
        font-weight: 400;
        color: var(--dark);
        background-color: var(--lightish);
        opacity: 0;

        transition: color var(--tooltip-transition-time) linear,
        background-color var(--tooltip-transition-time) linear,
        opacity var(--tooltip-transition-time) linear var(--tooltip-delay),
        transform var(--tooltip-transition-time) linear var(--tooltip-delay);
    }

    &:hover::after,
    &:focus-visible::after {
        opacity: 0.7;
        transform: translateX(-50%) scale(1);
    }

    &.left::after {
        left: revert;
        right: 100%;
        top: 50%;
        transform: translateY(-50%) scale(0);
        transform-origin: right center;
        padding: 0.25em 0.5em;
    }

    &.left:hover::after,
    &.left:focus-visible::after {
        transform: translateY(-50%) scale(1);
    }
}

.flex {
    display: flex;

    &.column {
        flex-direction: column;
    }
    &.column-reverse {
        flex-direction: column-reverse;
    }
    &.row {
        flex-direction: row;
    }
    &.row-reverse {
        flex-direction: row-reverse;
    }

    &.wrap {
        flex-wrap: wrap;
    }

    &.nowrap {
        flex-wrap: nowrap;
    }

    &.justify-content-center {
        justify-content: center;
    }
    &.justify-content-start {
        justify-content: start;
    }
    &.justify-content-end {
        justify-content: end;
    }
    &.justify-content-space-around {
        justify-content: space-around;
    }
    &.justify-content-space-between {
        justify-content: space-between;
    }
    &.justify-content-space-evenly {
        justify-content: space-evenly;
    }

    &.align-items-center {
        align-items: center;
    }
    &.align-items-start {
        align-items: start;
    }
    &.align-items-end {
        align-items: end;
    }
    &.align-items-stretch {
        align-items: stretch;
    }
    &.align-items-baseline {
        align-items: baseline;
    }

    &.align-content-center {
        align-content: center;
    }
    &.align-content-start {
        align-content: start;
    }
    &.align-content-end {
        align-content: end;
    }
    &.align-content-stretch {
        align-content: stretch;
    }
    &.align-content-space-around {
        align-content: space-around;
    }
    &.align-content-space-between {
        align-content: space-between;
    }
}

@mixin _left($prefix, $suffix, $expr, $val) {
    .#{$prefix}l#{$suffix} {
        #{$expr}-left: #{$val} !important;
    }
}

@mixin _right($prefix, $suffix, $expr, $val) {
    .#{$prefix}r#{$suffix} {
        #{$expr}-right: #{$val} !important;
    }
}

@mixin _top($prefix, $suffix, $expr, $val) {
    .#{$prefix}t#{$suffix} {
        #{$expr}-top: #{$val} !important;
    }
}

@mixin _bottom($prefix, $suffix, $expr, $val) {
    .#{$prefix}b#{$suffix} {
        #{$expr}-bottom: #{$val} !important;
    }
}

@mixin _axis_x($prefix, $suffix, $expr, $val) {
    .#{$prefix}x#{$suffix} {
        #{$expr}-left: #{$val} !important;
        #{$expr}-right: #{$val} !important;
    }
}


@mixin _axis_y($prefix, $suffix, $expr, $val) {
    .#{$prefix}y#{$suffix} {
        #{$expr}-top: #{$val} !important;
        #{$expr}-bottom: #{$val} !important;
    }
}

@mixin _expr($class_name, $expr, $val) {
    .#{$class_name} {
        #{$expr}: #{$val};
    }
}

@mixin lrtbxy($prefix, $suffix, $expr, $val) {
    @include _left($prefix, $suffix, $expr, $val);
    @include _right($prefix, $suffix, $expr, $val);
    @include _top($prefix, $suffix, $expr, $val);
    @include _bottom($prefix, $suffix, $expr, $val);
    @include _axis_x($prefix, $suffix, $expr, $val);
    @include _axis_y($prefix, $suffix, $expr, $val);
}

@mixin media-queries($class_name, $suffix, $expr, $val) {
    .#{$class_name}#{$suffix} {
        #{$expr}: #{$val};
    }

    @include media("<=tablet") {
        .#{$class_name}-tablet#{$suffix} {
            #{$expr}: #{$val};

            &.#{$class_name}#{$suffix} {
                #{$expr}: unset;
            }
        }
    }

    @include media("<=phone") {
        .#{$class_name}-phone#{$suffix} {
            #{$expr}: #{$val};

            &.#{$class_name}#{$suffix} {
                #{$expr}: unset;
            }
        }
    }
}

@mixin media-queries-multi($class_name, $suffix, $val, $exprs...) {
    .#{$class_name}#{$suffix} {
        @each $expr in $exprs {
            #{$expr}: #{$val};
        }
    }

    @include media("<=tablet") {
        .#{$class_name}-tablet#{$suffix} {
            @each $expr in $exprs {
                #{$expr}: #{$val};
            }

            &.#{$class_name}#{$suffix} {
                @each $expr in $exprs {
                    #{$expr}: unset;
                }
            }
        }
    }

    @include media("<=phone") {
        .#{$class_name}-phone#{$suffix} {
            @each $expr in $exprs {
                #{$expr}: #{$val};
            }

            &.#{$class_name}#{$suffix} {
                @each $expr in $exprs {
                    #{$expr}: unset;
                }
            }
        }
    }
}

$__map_0: ("m": "margin", "p": "padding");
$__steps_0: 10;
$__multiplier_0: 0.25;
@each $key in map-keys($__map_0) {
    $val: map-get($__map_0, $key);
    @for $i from 0 through $__steps_0 {
        @include lrtbxy("#{$key}", "-#{$i}", "#{$val}", #{$i * $__multiplier_0}em);
    }

    @include media("<=tablet") {
        @for $i from 0 through $__steps_0 {
            @include lrtbxy("#{$key}", "-tablet-#{$i}", "#{$val}", #{$i * $__multiplier_0}em);
        }
    }
    @include media("<=phone") {
        @for $i from 0 through $__steps_0 {
            @include lrtbxy("#{$key}", "-phone-#{$i}", "#{$val}", #{$i * $__multiplier_0}em);
        }
    }
}

$__steps_1: 10;
@for $i from 1 through $__steps_1 {
    @include _expr("fw-#{$i * 100}", "font-weight", "#{$i * 100} !important");
}
@each $alignment in ("start", "center", "end", "justify") {
    @include _expr("text-#{$alignment}", "text-align", "#{$alignment} !important");
}

@include media("<=tablet") {
    @for $i from 1 through $__steps_1 {
        @include _expr("fw-tablet-#{$i * 100}", "font-weight", "#{$i * 100} !important");
    }
    @each $alignment in ("start", "center", "end", "justify") {
        @include _expr("text-tablet-#{$alignment}", "text-align", "#{$alignment} !important");
    }
}

@include media("<=phone") {
    @for $i from 1 through $__steps_1 {
        @include _expr("fw-phone-#{$i * 100}", "font-weight", "#{$i * 100} !important");
    }
    @each $alignment in ("start", "center", "end", "justify") {
        @include _expr("text-phone-#{$alignment}", "text-align", "#{$alignment} !important");
    }
}

$__list_0: ("0.25", "0.5", "0.75", "1", "1.25", "1.5", "1.75", "2", "2.5", "3", "3.5", "4");
@each $scale in $__list_0 {
    $scale_str: str-replace-first(".", "_", $scale);
    .scale-#{$scale_str}x {
        transform-origin: top center;
        & > * {
            transform: scale(#{$scale});
        }
    }
}


.underlined {
    text-decoration: underline;
    text-decoration-thickness: from-font;

    &::selection {
        text-decoration: underline;
    }

    &.raised {
        text-underline-offset: -0.22em;
    }
}

.transform {
    $steps: 50;
    @for $i from 0 through $steps {
        &.raise-#{$i} {
            transform: translateY(#{-$i * 0.125}em);
        }

        &.grow-#{$i} {
            transform: scale(#{$i * 0.25});
        }

        @for $j from 0 through $steps {
            &.grow-#{$i}.raise-#{$j} {
                transform: scale(#{$i * 0.25}) translateY(#{-$j * 0.125}em);
            }
        }
    }
    @include media("<=phone") {
        @for $i from 0 through $steps {
            @for $j from 0 through $steps {
                &.grow-phone-#{$i}.raise-phone-#{$j} {
                    transform: scale(#{$i * 0.25}) translateY(#{-$j * 0.125}em) !important;
                }
            }

            &.grow-phone-#{$i} {
                transform: scale(#{$i * 0.5}) !important;
            }

            &.raise-phone-#{$i} {
                transform: translateY(#{-$i * 0.125}em) !important;
            }
        }
    }

}

#theme-toggle {
    position: absolute;
    right: 0;
    top: 0.4rem;
    background: transparent;
    border: none;
    margin: 0;
    padding: 0;
    isolation: isolate;
    z-index: 1000;

    &:hover {
        cursor: pointer;
    }

    & > * {
        pointer-events: none;
    }
}

.greeting {
    font-size: 2.25em;
    padding-bottom: 0.5em;
    letter-spacing: normal;
    font-weight: lighter !important;
    text-transform: none;
}

* {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.unselectable {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
    -moz-user-select: none; /* Old versions of Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none;
}

#vecerdi-dev-title::after {
    content: "vecerdi.dev";
}

/* ==================================================
   Separator Arrows
================================================== */

.arrow-separator {
    position: relative;
}

.arrow-separator:after {
    top: 100%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-width: 12px;
    left: 50%;
    margin-left: -12px;
    z-index: 11;
}

.arrow-white:after {
    border-color: var(--light) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0); /** Using RGB to remove dark line in Firefox **/
}

.arrow-theme:after {
    border-color: var(--primary) rgba(22, 160, 133, 0) rgba(22, 160, 133, 0) rgba(22, 160, 133, 0);
}

.arrow-themelight:after {
    border-color: var(--primary-light) rgba(26, 188, 156, 0) rgba(26, 188, 156, 0) rgba(26, 188, 156, 0);
}

.arrow-grey:after {
    border-color: var(--gray) rgba(238, 238, 238, 0) rgba(238, 238, 238, 0) rgba(238, 238, 238, 0);
}

/* ==================================================
   General Layout Styles
================================================== */

.full-padding {
    width: 100%;
    padding: 60px 30px;
    min-width: 280px;
}

.full-padding .bodycontainer {
    margin: 0 auto;
    width: 100%;
    max-width: 1000px;
    text-align: center;
}

.full-width {
    width: 100%;
}

.full-height {
    height: 100%;
}

.full-width .bodycontainer {
    margin: 0 auto;
    width: 100%;
    max-width: 1000px;
    text-align: center;
}

.main-container {
    /*display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100%;*/
}

.main-container h1 {
    padding: 6px 0 10px 0;
    margin-bottom: 0;
    letter-spacing: -1.5px;
    font-weight: 400;
}

.main-container h1 span {
    font-size: 70px;
    line-height: 70px;
    letter-spacing: -1.4px;
    font-weight: 300;
}

.main-container p {
    margin-bottom: 0;
}

.main-container p span {
    font-size: 90px;
    line-height: 90px;
}

.social-links ul li {
    display: inline-block;
    list-style-type: none;
    margin: 0 10px;
}

.social-links ul li a {
    font-size: 36px;
    color: var(--dark-gray);
}

.social-links ul li a:hover {
    color: var(--primary);
}

/* ==================================================
   Responsive Media Queries - Tablets
================================================== */

@include media("<=tablet") {
    body {
        font-size: 23px;
        line-height: 29px;
    }

    .main-container h1 {
        font-size: 54px;
        line-height: 54px;
        letter-spacing: -1.2px;
    }

    .main-container h1 span {
        font-size: 70px;
        line-height: 70px;
    }
}

/* ==================================================
   Responsive Media Queries - Mobiles
================================================== */

@include media("<=phone") {
    body {
        font-size: 21px;
        line-height: 27px;
    }

    .main-container h1 {
        font-size: 36px;
        line-height: 36px;
    }

    .main-container h1 span {
        font-size: 50px;
        line-height: 50px;
    }
}

@include media(">=huge") {
    body {
        font-size: 2rem;
        line-height: calc((29/23) * 2rem);
    }

    .social-links ul li a {
        font-size: 3rem;
    }
}


/* COOKIE BANNER */